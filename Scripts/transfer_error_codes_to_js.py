#!/usr/bin/env python3

# transfer_error_codes_to_js.py
# Tansfers all error codes in an Enum / static vars AppErrorCode.swift file into an error_codes.js file with a similar structure.
# Ido Rabin @ Sept 2022
# python3


import fileinput
from subprocess import check_output
import re
import sys
import os
from os import path, makedirs
import fileinput
from tempfile import NamedTemporaryFile
from datetime import datetime

SOURCE_FILEPATH = '/Users/ido/vapor/bserver/Sources/App/App specific/AppError/AppErrorCode.swift'
TARGET_FILEPATH = '/Users/ido/vapor/bserver/Public/web_scripts/error_codes.js'

print(f'= transfer_error_codes_to_js.py is starting: =')

if not os.path.isfile(SOURCE_FILEPATH):
    print(f'❌ bump_build_nr.py failed finding SOURCE_FILEPATH - please correct the path: {SOURCE_FILEPATH}')

if not os.path.isfile(TARGET_FILEPATH):
    print(f'❌ bump_build_nr.py failed finding TARGET_FILEPATH - please correct the path: {TARGET_FILEPATH}')

# open Version file
temp_file_name = ''
can_write = False
now = datetime.now() # current date and time
date_time = now.strftime("%d/%m/%Y, %H:%M:%S")

with open(SOURCE_FILEPATH, mode='r+', encoding='utf-8') as f:
    with NamedTemporaryFile(delete=False, mode='w+', encoding='utf-8') as fout:
        temp_file_name = fout.name
        fout.write("//\n")
        fout.write("// ErrorCodes.js\n")
        fout.write("//\n")
        fout.write(f"// Autogenerated for Bricks on Vapor / Leaf as JS. on:{date_time}\n")
        fout.write(f"// Autogenerator using transfer_error_codes_to_js.py\n")
        fout.write("\n\n")
        fout.write("// Autogenerated by script\n")
        fout.write("const AppErrorCode = {\n\n")
        code = 0
        name = ""
        comps = ["", ""]
        for line in f:
            lne = line.strip()
            if lne.startswith("enum AppErrorCode"):
                can_write = True
            if can_write and len(lne) == 0:
                fout.write(f"{line}")
            if can_write and lne.startswith("//"):
                if "== END OF CASES ==" in lne:
                    can_write = False
                else:
                    fout.write(f"{line}")
            elif can_write and lne.startswith("case ") and not (("..<" in lne) or ("..." in lne)):
                comps = line.split("=")
                name = line.strip()
                if len(comps) == 2:
                    parted = comps[1]
                    if "//" in parted:
                        parted = parted.split("//")[0]
                    if int(parted) > 0:
                        code = int(parted)
                        name = comps[0]
                        print(f'{code} Case line: {lne}');
                else :
                    code += 1
                    print(f'{code} Case line: {lne}');
                name = name.lstrip("case ").strip("\"").strip()
                fout.write(f"\t{name} : {{\n")
                fout.write(f"\t\tcode : {code},\n")
                fout.write(f"\t\treasonPhrase : \"TODO - reason phrase for|stt_phrase|code:{code}\",\n")
                fout.write(f"\t}},\n")
                                 
        fout.write("}")

os.rename(temp_file_name, TARGET_FILEPATH)
print(f'✅  {TARGET_FILEPATH} was successfully updated')
